{
	"if": {
		"prefix": "if ",
		"body": [
			"if ($1) {",
			"$2",
			"}"
		],
		"description": ""
	},
	"else if": {
		"prefix": "} else if ",
		"body": [
			"} else if ($1) {",
			"$2",
			"}"
		],
		"description": ""
	},
	"else": {
		"prefix": "} else ",
		"body": [
			"} else {",
			"$2",
			"}"
		],
		"description": ""
	},
	"for in": {
		"prefix": "for",
		"body": [
			"for (let key in ${1:配列}) {",
			"\tlet val = ${1:配列}[key];",
			"}"
		],
		"description": "for (let key in array) {}"
	},
	"for of": {
		"prefix": "for",
		"body": [
			"for (let val of ${1:配列}) {",
			"}"
		],
		"description": "for (let val of array)"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${1:var}) {",
			"\tcase '': {",
			"\t\tbreak;",
			"\t}",
			"\tdefault: {",
			"\t\tbreak;",
			"\t}",
			"}"
			],
		"description": "switch (val) { }"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case '$1': {",
			"\tbreak;",
			"}"
			],
		"description": "switch case"
	},
	"modal": {
		"prefix": "let modal",
		"body": [
			"let modal = this.modalCtrl.create(${1:ページクラス});",
			"// モーダルページが閉じたときの処理",
			"modal.onDidDismiss((result: ${2:戻り値の型}) => {",
			"\tif (result) {",
			"\t\t",
			"\t}",
			"});",
			"// モーダルを開く",
			"modal.present();",
		],
		"description": "let modal = this.modalCtrl.create()"
	},
	"public onSubmit()": {
		"prefix": "public onSubmit()",
		"body": [
			"/**",
			"\t* [登録]ボタンを押した処理",
			"\t*/",
			"\tpublic onSubmit() {",
			"\tif (!this.checkOnSubmit()) {",
			"\t\t// エラーがある",
			"\t\treturn;",
			"\t}",
			"",
			"\tlet data = this.formGroup.value;",
			"",
			"\t// 戻り値を作成",
			"",
			"\t// モーダルを閉じる",
			"\tthis.viewCtrl.dismiss(ret);",
			"}",
		],
		"description": "public onSubmit()"
	},
	"public onCancel()": {
		"prefix": "public onCancel()",
		"body": [
			"/**",
			"\t* キャンセルボタンを押した",
			"\t*/",
			"public onCancel() {",
			"\tthis.viewCtrl.dismiss();",
			"}",
		],
		"description": "public onCancel()"
	},
	"alert mess": {
		"prefix": "alert",
		"body": [
			"let prompt = this.alertCtrl.create({",
			"\ttitle: '$1',",
			"\tmessage: '$2',",
			"\tbuttons: ['OK'],",
			"});",
			"prompt.present();",
		],
		"description": "メッセージ用 alert"
	},
	"toast": {
		"prefix": "toast",
		"body": [
			"let toast = this.toastCtrl.create({",
			"\tmessage: '',",
			"\tduration: 3000,",
			"\tposition: '${1|top,middle,bottom|}'",
			"});",
			"",
			"toast.onDidDismiss(() => {",
			"\tconsole.log('Dismissed toast');",
			"});",
			"",
			"toast.present();"
		],
		"description": "toast"
	},
	"Promise": {
		"prefix": "Promise",
		"body": [
			"Promise<${1:any}> {",
			"  return new Promise<${1:戻り値}>((resolve: (value?: $1) => void, reject: (reason?: any) => void) => {",
			"    $2",
			"  });",
			"}"
		],
		"description": "Promise<${1:any}> { retun new ..."
	},
	"promise new": {
		"prefix": "Promise",
		"body": [
			"Promise<$1>((resolve: (value?: $1) => void, reject: (reason?: any) => void) => {",
			"\t$2",
			"});",
		],
		"description": "new Promise<$1>((resolve..."
	},
	"promise then": {
		"prefix": "then",
		"body": [
			"then((value: $1) => {",
			"\tresolve();",
			"}).catch((reason: any) => {",
			"\treject();",
			"});",
		],
		"description": "promise then"
	},
	"promise catch": {
		"prefix": "catch",
		"body": [
			"catch((reason: any) => {",
			"\t// 例外発生",
			"\treject(reason);",
			"});",
		],
		"description": "catch((reason: any) => {})"
	},
	"catch": {
		"prefix": "catch",
		"body": [
			"catch (e) {",
			"\t// 例外発生",
			"\t${1|;,console.error(e);|}",
			"}",
		],
		"description": "catch (e) {}"
	},
	"showLoading": {
		"prefix": "showLoading",
		"body": [
			"  private loadingCtrl: LoadingController,",
			"private loading: Loading;",
			"",
			"/**",
			" * 遅延ローディングを表示",
			" */",
			"private showLoading() {",
			"  this.loading = this.loadingCtrl.create({",
			"    content: \"お待ちください。\",",
			"    dismissOnPageChange: true,",
			"  });",
			"  this.loading.present();",
			"}",
			"/**",
			" * 遅延ローディングを消去",
			" */",
			"private hideLoading() {",
			"  if (this.loading) {",
			"    this.loading.dismiss();",
			"    this.loading = null;",
			"  }",
			"}",
		],
		"description": "showLoading(), hideLoading()",
	},
	"showError": {
		"prefix": "showError",
		"body": [
			"  private alertCtrl: AlertController,",
			"",
			"/**",
			" * エラーダイアログ",
			" */",
			"private showError(text) {",
			"  this.hideLoading();",
			"  const alert = this.alertCtrl.create({",
			"    title: \"エラー\",",
			"    subTitle: text,",
			"    buttons: [\"OK\"]",
			"  });",
			"  alert.present();",
			"}",
		],
		"description": "showAllert()",
	},
	"showToast": {
		"prefix": "showError",
		"body": [
			"  private toastCtrl: ToastController,",
			"/**",
			" * トーストの表示",
			" * @param text 表示する文字列",
			" */",
			"private showToast(text: string) {",
			"  this.hideLoading();",
			"  // トースト作成",
			"  let toast = this.toastCtrl.create({",
			"    message: test,",
			"    duration: 3000,",
			"    position: \"${1|top,middle,bottom|}\",",
			"  });",
			"  // 終了時の処理設定",
			"  toast.onDidDismiss(() => {",
			"    console.log('Dismissed toast');",
			"  });",
			"  // 表示開始",
			"  toast.present();",
			"}",
		],
		"description": "showToast()",
	},
	"function": {
		"prefix": "function",
		"body": [
			"/**",
			" * ${1:タイトル}",
			" * @param ",
			" * @return ",
			" */",
			"function ${2:関数名}(): ${3:戻値の型} {",
			"$4",
			"\treturn;",
			"}",
		],
		"description": "関数定義"
	},
	"editor": {
		"prefix": "editor",
		"body": [
			"if (!vscode.window.activeTextEditor) {",
			"\treturn;",
			"}",
			"const editor: vscode.TextEditor = vscode.window.activeTextEditor;"
		],
		"description": "if (!vscode.window.activeTextEditor) {"
	}

	

}